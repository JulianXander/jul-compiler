-fix checker test list-type-error
	-Can not assign 4 to TypeOf(Text)
?typeToString expand references 1 level deep
-refactor CompileTimeType TypeInfo
	-mit SourceExpression anreichern für Descriptions, Symbole
		-vgl server OnCompletion, findSymbol
		-ggf sourceFilePath berücksichtigen wegen imports
?filter in corelib
-multiline returntype parser
?dictionary literal field completion mit compiletimetype der description enthält oder dereferenceTypeExpression über mehrere dateien mit import auflösung
?tuple builtInType vs type Array, DictionaryLiteralType vs type Dictionary
-debug experience vebessern
	?sourcemap
	?intermediate js files direkt mit node ausführbar
-doku
	-https://docusaurus.io/
	-en übersetzung vgl https://docusaurus.io/docs/i18n/tutorial
?spread operator für branching value
	-branching operator spreadet nicht mehr implizit
	?ebenso was tun mit type parametered function vgl function.call.jul
		myFunction1 = (a: MyType) => log(§hi§)
		typeFunction = MyType => log(§hi§)
		?immer äquivalent
		?oder nur äquivalent mit 'primitive' types und sonst spreaden
?tryAssignParams mit rest dictionary
?was tun mit typeGuard bei destructuring import
?alias bei rest parameter
	?rest arg mit parameter namen übergeben
?anonyme parameter mit _/_1, _2 etc
	-anonymer parameter für type parametered functions
	?rest args anonym
?shared code? libraries?
?dereference parameterReference in getTypeError oder infer paramterReference type mit path?
?fully dereferenced type und nicht dereferenced inferred type in expression speichern, fully dereferenced für hover info nutzen
?type inference: infer pure function call return type wenn alle argumente statisch bekannt durch aufruf der funktion
	?interpreter oder runtime benutzen
	-vgl. type-checking-test.jul Zeile 50 vs 51 variable type
	-statisch bekannt <=> type = primitive/collection
-examples sortieren, aufräumen, organisieren?
-homepage
	?deutsch vs englisch
	-title navbar
		-home, roadmap, documentation
?FractionValueType
	-für custom typeToString
	-alternativ custom typeToString für Fraction structured values
?typeToString mit custom types, custom toString?
?function as type
	-1. check args assignable
	-2. check returnValue = true
?catchAll default case in branching mit () oder Any?
-taschenrechner demo app
?fix dictionary value als type typeChecking?
	?wie soll sich das verhalten? wird das gebraucht?
?typeChecking: return union mit Error, oder compiler error
	?compiler error wenn assignment unmöglich, error union type wenn Fehler möglich?
-virtual document für core-lib.jul
	-https://code.visualstudio.com/api/extension-guides/virtual-documents
-compile yaml to js wegen rundungsfehler bei großen zahlen
	-https://github.com/nodeca/js-yaml/blob/2b5620ed8f03ba0df319fe7710f6d7fd44811742/examples/int_type_override.js
?weitere eingebettete sprachen außer html,js
-programmatic language support für embbedded languages
	-css (direkt embedded in jul)
	-css embedded in html
	-js
	?Language Services vs Request Forwarding
	-https://code.visualstudio.com/api/language-extensions/embedded-languages
-anführungsstriche in paragaph umwandeln