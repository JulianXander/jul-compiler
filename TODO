-type info für yaml, json, js imports
-compile to ecmascript modules statt commonjs
-fix webpack mit node_modules
-ts module interop
?alias bei rest parameter
	?rest arg mit parameter namen übergeben
?spread operator für branching value
	-branching operator spreadet nicht mehr implizit
?anonyme parameter mit _/_1, _2 etc
	-anonymer parameter für type parametered functions
	?rest args anonym
?shared code? libraries?
?dereference parameterReference in getTypeError oder infer paramterReference type mit path?
-Escaped Dereferencing
-fix List type hoverinfo
-validate import paths: check file exists, valid ending
-fix typeChecking t2: FalseType = 4 vgl test1-wip.jul
?type inference: infer pure function call return type wenn alle argumente statisch bekannt durch aufruf der funktion
	-vgl. type-checking-test.jul Zeile 50 vs 51 variable type
	?wie erkennt man dass ein argument statisch bekannt ist
	?pure functions kennzeichnen
		?wie
-typechecking testen:
	-Without
	-NonZeroInteger
-type inference: infer argument type bei function literal wenn literal inline argument eines function calls ist
	-vgl fizz-buzz.jul index
-type inference: infer branching argument type im sub scope der branch functions narrowed by function parameter type
	-fehler wenn branching argument type = empty/never, also unreachable code detected
-examples sortieren, aufräumen, organisieren?
-homepage
	?deutsch vs englisch
	-title navbar
		-home, roadmap, documentation
		-github wiki für doku prüfen
+infix function call chain inline/multiline
	-runtime testen
-float typeToString mit f?
?FractionValueType
	-für custom typeToSting
?typeToString mit custom types, custom toString?
-docs
	-https://prismjs.com/extending.html#language-definitions
-builtins:
	-Fraction
		-create Fraction mit denominator kürzen
			-auch in parser
		?toString
		?fractionToDecimal mit x Stellen
		?fractionToFloat mit x Stellen
		-number type
		-integer type
	-Intersection/Exclude
	-NonZero (Integer/Float?), PositiveInteger
	-repeat?
	-modulo
	-equal
	?Subtract type?
		-PositiveInteger.subtract(1) => PositiveInteger & 0 = NonNegativeInteger
		-(positiveInteger.exclude(1)).subtract(1) => (PositiveInteger & 0).exclude(1 - 1 = 0) = PositiveInteger
?function as type
	-1. check args assignable
	-2. check returnValue = true
?catchAll default case in branching mit () oder Any?
-fix infix (dotted) function call parser mit chains, vgl fizz-buzz.jul
-taschenrechner demo app
-fix and typeChecking vgl typeCheckingTest.jul
-tuple typechecking
?fix dictionary value als type typeChecking?
	?wie soll sich das verhalten? wird das gebraucht?
?typeChecking: return union mit Error, oder compiler error
	?compiler error wenn assignment unmöglich, error union type wenn Fehler möglich?
-file system guided intellisense bei import path
-virtual document für core-lib.jul
	-https://code.visualstudio.com/api/extension-guides/virtual-documents
-emitter mit parseExpression statt checkedExpression, checkedExpression entfernen
-out js files bundlen statt node modules kopieren
	?npm module publishen?
?Decimal
	?decimal fixed precision? arbitrary precision?
	?Decimal: 123d, 12.3d vs d123, d12.3