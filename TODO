-typechecking testen:
	+IntegerLiteral
	+Integer
	+Not
	-Without
	-NonZeroInteger
-fizzbuzz lauffähig
	-builtins:
		+Integer
		+NonZeroInteger
			+Without
		-equal
		-modulo
		-repeat
-examples sortieren, aufräumen, organisieren?
-homepage
	?deutsch vs englisch
	-title navbar
		-home, roadmap, documentation
+infix function call chain inline/multiline
	-runtime testen
-float typeToString mit f?
?FractionValueType
	-für custom typeToSting
?typeToString mit custom types, custom toString?
-docs
	-https://prismjs.com/extending.html#language-definitions
-builtins:
	-Fraction
		-create Fraction mit denominator kürzen
			-auch in parser
		?toString
		?fractionToDecimal mit x Stellen
		?fractionToFloat mit x Stellen
		-number type
		-integer type
	-Intersection/Exclude
	-NonZero (Integer/Float?), PositiveInteger
	-repeat?
	-modulo
	-equal
	?Subtract type?
		-PositiveInteger.subtract(1) => PositiveInteger & 0 = NonNegativeInteger
		-(positiveInteger.exclude(1)).subtract(1) => (PositiveInteger & 0).exclude(1 - 1 = 0) = PositiveInteger
?function as type
	-1. check args assignable
	-2. check returnValue = true
?catchAll default case in branching mit () oder Any?
-fix infix (dotted) function call parser mit chains, vgl fizz-buzz.jul
-taschenrechner demo app
-fix and typeChecking vgl typeCheckingTest.jul
-tuple typechecking
?fix dictionary value als type typeChecking?
	?wie soll sich das verhalten? wird das gebraucht?
?typeChecking: return union mit Error, oder compiler error
	?compiler error wenn assignment unmöglich, error union type wenn Fehler möglich?
-file system guided intellisense bei import path
?dateiendung bei import path angeben
	?json, yaml, js, ts imports
-virtual document für core-lib.jul
	-https://code.visualstudio.com/api/extension-guides/virtual-documents
-emitter mit parseExpression statt checkedExpression, checkedExpression entfernen
-out js files bundlen statt node modules kopieren
	?npm module publishen?
?Decimal
	?decimal fixed precision? arbitrary precision?
	?Decimal: 123d, 12.3d vs d123, d12.3