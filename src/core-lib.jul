true = nativeValue(§true§)
false = nativeValue(§false§)
#region Types
# TODO split Unknown Type?
# any value
Any = nativeValue(§Any§)
# Type = Any :> Boolean
Type = nativeValue(§Type§)
# data structure containing 1 or more elements of type ElementType
List = nativeFunction(
	(ElementType: Type) :> Type
	true
	§js
		x => {
			if (!Array.isArray(x)
				|| !x.length) {
				return false;
			}
			if (ElementType === Any) {
				return true;
			}
			return x.every(element =>
				isOfType(element, ElementType));
		}
	§
)
# IntersectionType
And = nativeFunction(
	(...ChoiceTypes: List(Type)) :> Type
	true
	§js
		(...args) => new IntersectionType(args)
	§
)
# UnionType
Or = nativeFunction(
	(...ChoiceTypes: List(Type)) :> Type
	true
	§js
		(...args) => new UnionType(args)
	§
)
# ComplementType
Not = nativeFunction(
	(T: Type) :> Type
	true
	§js
		(T) => {
			return {
				[_julTypeSymbol]: 'not',
				SourceType: T,
			};
		}
	§
)
# SubtractionType
# Set difference: Minuend without Subtrahend
Without = (
	Minuend: Type
	Subtrahend: Type
) => Minuend.And(Not(Subtrahend))
# The Type that only contains the given value.
TypeOf = nativeFunction(
	(value: Any) :> Type
	true
	§js
		value => new TypeOfType(value)
	§
)
# The set of values that is of the given Type
# The inverse of TypeOf
ValueOf = nativeFunction(
	(T: TypeOf(Any)) :> T/value
	true
	§TODO§
)
# true or false
Boolean = nativeValue(§_Boolean§)
#region Number
# 64 bit floating point number
# Erlaubt performante Hardware-Rechenoperationen
Float = nativeValue(§Float§)
NonZeroFloat = Float.Without(0f)
# Ganzzahl beliebiger Größe
Integer = nativeValue(§Integer§)
NonZeroInteger = Integer.Without(0)
# x is part of Greater(y) <=> x > y
# TODO Greater Rational vs GreaterInteger, GreaterFloat
Greater = nativeFunction(
	(Value: Or(Integer Float)) :> Type
	true
	§js
		x => x > Value
	§
)
PositiveInteger = And(
	Integer
	Greater(0)
)
Fraction = (
	numerator: Integer
	denominator: Integer
)
Rational = Or(Integer Fraction)
#endregion Number
# sequence of characters (String)
Text = nativeValue(§_Text§)
Date = nativeValue(§_Date§)
Blob = nativeValue(§_Date§)
# Instance structure: (message: Text)
# TODO was wenn message = undefined?
Error = nativeValue(§_Error§)
# data structure containing 1 or more key-value-pairs of type ElementType
Dictionary = nativeFunction(
	(ElementType: Type) :> Type
	true
	§js
		x => {
			if (!isDictionary(value)) {
				return false;
			}
			if (ElementType === Any) {
				return true;
			}
			for (const key in value) {
				const elementValue = value[key];
				if (!isOfType(elementValue, ElementType)) {
					return false;
				}
			}
			return true;
		}
	§
)
# data structure representing a value of type ValueType changing over time
# Instance structure: (
# getValue: () :> ValueType
#	completed: Boolean
# )
# Type structure: (ValueType: Type)
Stream = nativeFunction(
	(ValueType: Type) :> Type
	true
	§js
		x => x instanceof StreamClass
	§
)
# Function = nativeFunction(
# 	# TODO?
# 	# (
# 	# 	parametersType: Type
# 	# 	returnType: Type
# 	# )
# 	§x => x instanceof Function§
# )
# FunctionType = (x: Any) :> x is () :> Any

# Or(
# 	(...args: List(Any)) :> Boolean
# 	# Literals (Number, Text, Boolean, Dictionary, List)
# 	# DictionaryType/DictionaryLiteralType/DictionaryTypeLiteral?
# 	FunctionType
# 	# TupleType?
# 	# StreamType?
# 	UnionType
# 	IntersectionType
# )
#endregion Types
#region Functions
#region Any
# Liefert true, wenn die beiden Werte gleich sind (Referenzgleichheit)
equal = nativeFunction(
	(first second) :> Boolean
	true
	§js
		(first, second) => first === second
	§
)
deepEqual = nativeFunction(
	(first second) :> Boolean
	true
	§TODO§
)
#endregion Any
#region Boolean
# Liefert die Negation des value
not = nativeFunction(
	(value: Boolean) :> Boolean
	true
	§js
		value => !value
	§
)
# Liefert true, wenn alle args true sind
and = nativeFunction(
	(...args: List(Boolean)) :> Boolean
	true
	§TODO§
)
# Liefert true, wenn mindestens ein arg true ist
or = nativeFunction(
	(...args: List(Boolean)) :> Boolean
	true
	§TODO§
)
#endregion Boolean
#region Number
#region arithmetic
# Liefert die Summe der args.
add = nativeFunction(
	(...args: List(Rational)) :> Rational
	true
	§TODO§
)
# Liefert die Summe der args.
addInteger = nativeFunction(
	(...args: List(Integer)) :> Integer
	true
	§js
		(...args) =>
			args.reduce(
				(accumulator, current) =>
					accumulator + current,
				0n)
	§
)
# Liefert die Summe der args.
addFloat = nativeFunction(
	(...args: List(Float)) :> Float
	true
	§js
		(...args) =>
			args.reduce(
				(accumulator, current) =>
					accumulator + current,
				0)
	§
)
# minuend - subtrahend
subtract = nativeFunction(
	(minuend: Rational subtrahend: Rational) :> Rational
	true
	§TODO§
)
# minuend - subtrahend
subtractInteger = nativeFunction(
	(minuend: Integer subtrahend: Integer) :> Integer
	true
	§js
		(minuend, subtrahend) => minuend - subtrahend
	§
)
# minuend - subtrahend
subtractFloat = nativeFunction(
	(minuend: Float subtrahend: Float) :> Float
	true
	§js
		(minuend, subtrahend) => minuend - subtrahend
	§
)
# Liefert das Produkt der args
multiply = nativeFunction(
	(...args: List(Rational)) :> Rational
	true
	§js
		(...args) =>
			args.reduce(
				(accumulator, current) =>
					accumulator * current,
				0)
	§
)
# Liefert das Produkt der args
multiplyFloat = nativeFunction(
	(...args: List(Float)) :> Float
	true
	§js
		(...args) =>
			args.reduce(
				(accumulator, current) =>
					accumulator * current,
				0)
	§
)
# dividend / divisor
divideFloat = nativeFunction(
	(dividend: Float divisor: NonZeroFloat) :> Float
	true
	§js
		(dividend, divisor) => dividend / divisor
	§
)
# Liefert den Rest bei ganzzahliger Division.
# TODO moduloFloat?
modulo = nativeFunction(
	(dividend: Integer divisor: NonZeroInteger) :> Integer
	true
	§js
		(dividend, divisor) => dividend % divisor
	§
)
#endregion arithmetic
# TODO support Rational values
# Liefert true, wenn first größer als second ist.
greater = nativeFunction(
	(
		first: Or(Integer Float)
		second: Or(Integer Float)
	) :> Boolean
	true
	§js
		(first, second) => first > second
	§
)
# TODO support Rational values
maxInteger = nativeFunction(
	(...args: List(Integer)) :> Integer
	true
	§js
		(...args) {
			let max = args[0];
			for (let index = 1; index < args.length; index++) {
				const element = args[index]!;
				if (element > max) {
					max = element;
				}
			}
			return max;
		}
	§
)
maxFloat = nativeFunction(
	(...args: List(Float)) :> Float
	true
	§js
		(...args) => Math.max(...args)
	§
)
rationalToFloat = nativeFunction(
	(rational: Rational) :> Float
	true
	§Todo§
)
#endregion Number
#region Text
combineTexts = nativeFunction(
	(
		texts: Or(() List(Text))
		separator: Or(() Text)
	) :> Text
	true
	§js
		String.join
	§
)
# Liefert Error, wenn die gegebene TextNumber keine valide Zahl ist.
parseFloat = nativeFunction(
	(textNumber: Text) :> Or(Float Error)
	true
	§js
		(textNumber) => {
			const result = +textNumber;
			if (Number.isNaN(result)) {
				return new Error('Invalid number.');
			}
			return result;
		}
	§
)
#region JSON
JsonPrimitive = Or(() Boolean Rational Text)
JsonValue = Or(JsonPrimitive List(JsonPrimitive) Dictionary(JsonPrimitive))
# Liefert Error, wenn das gegebene json kein valides JSON ist.
parseJson = nativeFunction(
	(json: Text) :> Or(JsonValue Error)
	true
	§TODO§
)
toJson = nativeFunction(
	(value: JsonValue) :> Text
	true
	§TODO§
)
#endregion JSON
# Gibt die capture groups zurück
# unnamedCaptures enthält als ersten Eintrag das gesamte Match
# TODO stattdessen ganzes match in extra feld?
# Liefert Error bei Syntaxfehler in regex.
# TODO validate regex Text mit TypeChecker, regex Syntax Highlighting
regex = nativeFunction(
	(
		text: Text
		regex: Text
	) :> (
		isMatch: Boolean
		namedCaptures: Or(() Dictionary(Text))
		unnamedCaptures: Or(() List(Text))
	)
	true
	§TODO§
)
#endregion Text
#region Date
addDate = nativeFunction(
	(
		date: Date
		years: Or(() Integer)
		months: Or(() Integer)
		days: Or(() Integer)
		hours: Or(() Integer)
		minutes: Or(() Integer)
		seconds: Or(() Integer)
		milliseconds: Or(() Integer)
	) :> Date
	true
	§TODO§
)
currentDate = nativeFunction(
	() :> Date
	false
	§js
		() => new Date()
	§
)
# ISO 8601
toIsoDateText = nativeFunction(
	(date: Date) :> Text
	true
	§js
		date => date.toISOString()
	§
)
#endregion Date
#region List
# Liefert die Anzahl der Elemente in der Liste.
# Liefert 0 bei Empty.
# Achtung: List/length liefert die javascript Array.length als Float
length = nativeFunction(
	(
		values: Or(() List(Any))
	) :> PositiveInteger
	true
	§js
		(values) => {
			if (!values) {
				return 0n;
			}
			return BigInt(values.length);
		}
	§
)
# TODO conditional return type, sodass empty nur geliefert wird, wenn index > values.Length
getElement = nativeFunction(
	(
		values: Or(() List(Any))
		# 1 basiert
		index: PositiveInteger
	) :> Or(() TypeOf(values)/ElementType)
	# TODO
	# index.greater(values.length()) ?
	# 	true => ()
	# 	false => TypeOf(values)/ElementType
	true
	§js
		(values, index) => values?.[Number(index) - 1]
	§
)
# Creates a new List without mutating the given List
setElement = nativeFunction(
	(
		values: Or(() List(Any))
		# 1 basiert
		index: PositiveInteger
		value: Any
	) :> List(Any)
	true
	§js
		(values, index, value) => {
			const copy = values
				? [...values]
				: [];
			copy[Number(index) - 1] = value;
			return copy;
		}
	§
)
map = nativeFunction(
	(
		values: Or(() List(Any))
		callback: (
			value: TypeOf(values)/ElementType
			index: PositiveInteger
		) :> Any
	) :> Or(() List(callback/ReturnType))
	# TODO pure wenn die args pure sind
	false
	§js
		(values, callback) => {
			if (!values) {
				return;
			}
			const mappedValues = values.map((value, index) => {
				return callback(value, BigInt(index + 1));
			});
			return mappedValues.length
				? mappedValues
				: undefined;
		}
	§
)
# filter Werte raus, für die predicate false liefert
filter = nativeFunction(
	(
		values: Or(() List(Any))
		predicate: (
			value: TypeOf(values)/ElementType
			index: PositiveInteger
		) :> Boolean
	) :> TypeOf(values)
	# TODO pure wenn die args pure sind
	false
	§js
		(values, predicate) => {
			if (!values) {
				return;
			}
			const filtered = values.filter((value, index) => {
				return predicate(value, BigInt(index + 1));
			});
			return filtered.length
				? filtered
				: undefined;
		}
	§
)
# filtert empty Werte raus
filterMap = nativeFunction(
	(
		values: Or(() List(Any))
		callback: (
			value: TypeOf(values)/ElementType
			index: PositiveInteger
		) :> Any
	) :> Or(() List(Without(callback/ReturnType ())))
	# TODO pure wenn die args pure sind
	false
	§js
		(values, callback) => {
			if (!values) {
				return;
			}
			const mappedValues = [];
			values.forEach((value, index) => {
				const mapped = callback(value, BigInt(index + 1));
				if (mapped !== undefined) {
					mappedValues.push(mapped);
				}
			});
			return mappedValues.length
				? mappedValues
				: undefined;
		}
	§
)
# Liefert einen Teilbereich der Liste von start bis end, oder bis zum Ende der Liste falls kein end angegeben.
# Inklusive start und end.
# TODO rename subList?
slice = nativeFunction(
	(
		values: Or(() List(Any))
		start: Integer
		end: Or(() Integer)
	) :> Or(() List(Any))
	true
	§js
		(values, start, end) => {
			if (!values) {
				return;
			}
			const sliced = values.slice(
				Number(start) - 1,
				typeof end === 'bigint'
					? Number(end)
					: undefined
			);
			return sliced.length ? sliced : undefined;
		}
	§
)
# Liefert das erste Element, für das predicate true liefert.
findFirst = nativeFunction(
	(
		values: Or(() List(Any))
		predicate: (
			value: TypeOf(values)/ElementType
			index: PositiveInteger
		) :> Boolean
	) :> Or(() TypeOf(values)/ElementType)
	# TODO pure wenn die args pure sind
	false
	§js
		(values, predicate) => {
			return values?.find((value, index) => {
				return predicate(value, BigInt(index + 1));
			});
		}
	§
)
# Liefert das letzte Element, für das predicate true liefert.
findLast = nativeFunction(
	(
		values: Or(() List(Any))
		predicate: (
			value: TypeOf(values)/ElementType
			index: PositiveInteger
		) :> Boolean
	) :> Or(() TypeOf(values)/ElementType)
	# TODO pure wenn die args pure sind
	false
	§js
		(values, predicate) => {
			return values?.findLast((value, index) => {
				return predicate(value, BigInt(index + 1));
			});
		}
	§
)
# Liefert den index des letzten Elements, für das predicate true liefert.
findLastIndex = nativeFunction(
	(
		values: Or(() List(Any))
		predicate: (
			value: TypeOf(values)/ElementType
			index: PositiveInteger
		) :> Boolean
	) :> Or(() PositiveInteger)
	# TODO pure wenn die args pure sind
	false
	§js
		TODO
	§
)
lastElement = nativeFunction(
	(values: Or(() List(Any))) :> Or(() TypeOf(values)/ElementType)
	true
	§js
		values => values?.[values.length - 1]
	§
)
forEach = nativeFunction(
	(
		values: Or(() List(Any))
		callback: (
			value: TypeOf(values)/ElementType
			index: PositiveInteger
		) :> Any
	) :> ()
	false
	§js
		(values, callback) => {
			values?.forEach((value, index) => {
				return callback(value, BigInt(index + 1));
			});
		}
	§
)
# Liefert true, falls predicate für mindestens einen value true liefert.
exists = nativeFunction(
	(
		values: Or(() List(Any))
		predicate: (
			value: TypeOf(values)/ElementType
			index: PositiveInteger
		) :> Any
	) :> Boolean
	# TODO pure wenn die args pure sind
	false
	§js
		(values, predicate) => {
			if (!values) {
				return false;
			}
			return values.some((value, index) => {
				return predicate(value, BigInt(index + 1));
			});
		}
	§
)
# Liefert true, falls predicate für alle value true liefert.
all = nativeFunction(
	(
		values: Or(() List(Any))
		predicate: (
			value: TypeOf(values)/ElementType
			index: PositiveInteger
		) :> Boolean
	) :> Boolean
	# TODO pure wenn die args pure sind
	false
	§js
		(values, predicate) => {
			if (!values) {
				return true;
			}
			return values.every((value, index) => {
				return predicate(value, BigInt(index + 1));
			});
		}
	§
)
toDictionary = nativeFunction(
	(
		values: Or(() List(Any))
		getKey: (
			value: TypeOf(values)/ElementType
			index: PositiveInteger
		) :> Text
		getValue: (
			value: TypeOf(values)/ElementType
			index: PositiveInteger
		) :> Any
	) :> Or(() Dictionary(Any))
	# TODO pure wenn die args pure sind
	false
	§js
		(values, getKey, getValue) => {
			if (!values) {
				return;
			}
			const dictionary = {};
			let indexBigint = 1n;
			for (let index = 0; index < values.length; index++) {
				const oldValue = values[index];
				const key = getKey(oldValue, indexBigint);
				const newValue = getValue(oldValue, indexBigint);
				dictionary[key] = newValue;
				indexBigint++;
			}
			return dictionary;
		}
	§
)
aggregate = nativeFunction(
	(
		values: Or(() List(Any))
		initialValue: Any
		callback: (
			accumulator: Any
			value: Any
			index: PositiveInteger
		) :> Any
	) :> Any
	# TODO pure wenn die args pure sind
	false
	§js
		(values, initialValue, callback) => {
			if (!values) {
				return initialValue;
			}
			return values.reduce(
				(accumulator, value, index) => {
					return callback(accumulator, value, BigInt(index + 1));
				},
				initialValue);
		}
	§
)
#endregion List
#region Dictionary
# Returns the value of the field
getField = nativeFunction(
	(
		dictionary: Or(() Dictionary(Any))
		key: Text
	) :> Or(() TypeOf(dictionary)/ElementType)
	true
	§js
		(dictionary, key) => dictionary?.[key]
	§
)
# Creates a new Dictionary without mutating the given dictionary
setField = nativeFunction(
	(
		dictionary: Or(() Dictionary(Any))
		key: Text
		value: Any
	) :> Dictionary(Any)
	true
	§js
		(dictionary, key, value) => {
			return {
				...dictionary,
				[key]: value,
			};
		}
	§
)
toList = nativeFunction(
	(
		dictionary: Or(() Dictionary(Any))
	) :> Or(() List(Any))
	true
	§js
		dictionary => {
			if (!dictionary) {
				return;
			}
			return Object.values(dictionary);
		}
	§
)
#endregion Dictionary
#region Stream
#region core
# Beendet den Stream.
complete = nativeFunction(
	(stream$: Stream(Any)) :> ()
	false
	§js
		(stream$) => {
			stream$.complete();
		}
	§
)
push = nativeFunction(
	(
		stream$: Stream(Any)
		value: stream$/ValueType
	) :> ()
	false
	§todo§
)
subscribe = nativeFunction(
	(
		stream$: Stream(Any)
		listener: (value: stream$/ValueType) :> Any
	) :> ()
	false
	§js
		(stream$, listener) => {
			const listenerFunction = (value) => {
				_callFunction(listener, [value]);
			};
			return stream$.subscribe(listenerFunction);
		}
	§
)
#endregion core
#region create
# Erzeugt einen Stream mit dem manuell push und complete aufgerufen werden muss.
create$ = nativeFunction(
	(
		ValueType: Type
		intitialValue: ValueType
	) :> Stream(ValueType)
	false
	§todo§
)
# Erzeugt einen vollendeten Stream, der nur den Startwert liefert.
completed$ = nativeFunction(
	(
		intitialValue: Any
	) :> Stream(TypeOf(intitialValue))
	false
	§todo§
)
# Startwert: ()
# Schickt eine HTTP Anfrage ab und liefert die Antwort als Text.
httpTextRequest$ = nativeFunction(
	(
		url: Text
		method: Text
		headers: Or(() Dictionary(Text))
		body: Any
	) :> Stream(Or(() Text Error))
	false
	§[...]§
)
# Startwert: ()
# Schickt eine HTTP Anfrage ab und liefert die Antwort als Blob.
httpBlobRequest$ = nativeFunction(
	(
		url: Text
		method: Text
		headers: Or(() Dictionary(Text))
		body: Any
	) :> Stream(Or(() Blob Error))
	false
	§[...]§
)
# gibt alle delayMs die nächste Zahl aus, beginnend mit 1
timer$ = nativeFunction(
	(delayMs: Float) :> Stream(Float)
	false
	§js
		(delayMs) => {
			const stream$ = createSource$(1);
			const cycle = () => {
				setTimeout(() => {
					if (stream$.completed) {
						return;
					}
					processId++;
					stream$.push(stream$.lastValue! + 1, processId);
					cycle();
				}, delayMs);
			};
			cycle();
			return stream$;
		}
	§
)
#endregion create
#region transform
map$ = nativeFunction(
	(
		source$: Stream(Any)
		transform$: (
			value: source$/ValueType
			# TODO
			# index: PositiveInteger
		) :> Any
	) :> Stream(transform$/ReturnType)
	false
	§TODO§
)
flatMergeMap$ = nativeFunction(
	(
		source$: Stream(Any)
		transform$: (
			value: source$/ValueType
			# TODO
			# index: PositiveInteger
		) :> Stream(Any)
	) :> Stream(transform$/ReturnType/ValueType)
	false
	§TODO§
)
flatSwitchMap$ = nativeFunction(
	(
		source$: Stream(Any)
		transform$: (
			value: source$/ValueType
			# TODO
			# index: PositiveInteger
		) :> Stream(Any)
	) :> Stream(transform$/ReturnType/ValueType)
	false
	§TODO§
)
# Wie RxJS combineLatest
# Wenn keine sources übergeben, dann wird Empty vom Rückgabestream emittiert.
combine$ = nativeFunction(
	(
		...sources: Or(() List(Stream(Any)))
		# TODO Mapped tuple returntype: combine$(Stream(A) Stream(B) Stream(C)) => Stream((A B C))
	) :> Stream(Or(() List(TypeOf(sources)/ElementType/ValueType)))
	false
	§TODO§
)
# Liefert die nächsten count Wertänderungen.
# Beginnt mit dem aktuellen Wert von source$.
take$ = nativeFunction(
	(
		source$: Stream(Any)
		count: NonZeroInteger
	) :> Stream(source$/ValueType)
	false
	§TODO§
)
#endregion transform
#endregion Stream
#region Utility
# Supported file types:
# .jul
# .js
# .json
# .yaml
import = nativeFunction(
	(path: Text) :> Any
	false
	§js
		require
	§
)
# Gibt die args in der Konsole aus.
log = nativeFunction(
	(...args: Or(() List(Any))) :> ()
	false
	§js
		console.log
	§
)
# Führt den iteratee count mal aus, beginnend mit index 1.
repeat = nativeFunction(
	(
		count: Integer
		iteratee: (index: PositiveInteger) :> Any
	) :> ()
	false
	§js
		repeat
	§
)
#region JavaScript
# Führt den gegebenen Text als JavaScript aus und liefert dessen Rückgabe.
runJs = nativeFunction(
	(js: Text) :> Any
	false
	§js
		eval
	§
)
# Interprets the given Text as js Code and yields the return value,
# assuming the specified type without checking. Make sure the Type fits under all circumstances.
nativeFunction = nativeFunction(
	# (FunctionType: (x: Any) :> x is () :> Any js: Text) :> FunctionType
	(
		FunctionType: Type
		pure: Boolean
		js: Text
	) :> ValueOf(FunctionType)
	false
	§[...]§
)
# Interprets the given Text as js Code and yields the return value,
# type???
nativeValue = nativeFunction(
	(js: Text) :> Any
	false
	§[...]§
)
#endregion JavaScript
# Assume that the value is of type ValueType without checking.
# Make sure the Type fits under all circumstances.
assume = nativeFunction(
	(value: Any ValueType: Type) :> ValueType
	true
	§js
		(value) => value
	§
)
#endregion Utility
#endregion Functions