true = nativeValue(§true§)
false = nativeValue(§false§)
#region Types
# TODO split Unknown Type?
# any value
Any = nativeValue(§Any§)
# true or false
Boolean = nativeValue(§_Boolean§)
#region Number
# 64 bit floating point number
# Erlaubt performante Hardware-Rechenoperationen
Float = nativeValue(§Float§)
# TODO FloatInteger = And(Float ?)
# Ganzzahl beliebiger Größe
Integer = nativeValue(§Integer§)
NonZeroInteger = Integer.Without(0)
Fraction = (
	numerator: Integer
	denominator: Integer
)
Rational = Or(Integer Fraction)
# TODO nonzero/positive
# TODO Number = Or(Float Rational)?
#endregion Number
# sequence of characters
String = nativeValue(§_String§)
Error = nativeValue(§_Error§)
# data structure containing 1 or more elements of type ElementType
List = nativeFunction(
	(ElementType: Type): Type
	# TODO generic List check
	§Array.isArray§
)
# data structure containing 1 or more key-value-pairs of type ElementType
Dictionary = nativeFunction(
	(ElementType: Type): Type
	# TODO ???
	§x => typeof x === 'object'§
)
# data structure representing a value of type T changing over time
Stream = nativeFunction(
	(ValueType: Type): Type
	# TODO generic Stream check
	§x => x instanceof Stream§
)
# Function = nativeFunction(
# 	# TODO?
# 	# (
# 	# 	parametersType: Type
# 	# 	returnType: Type
# 	# )
# 	§x => x instanceof Function§
# )

# Or(
# 	(...args: List(Any)): Boolean
# 	# Literals (Number, String, Boolean, Dictionary, List)
# 	# DictionaryType/DictionaryLiteralType/DictionaryTypeLiteral?
# 	FunctionType
# 	# TupleType?
# 	# StreamType?
# 	UnionType
# 	IntersectionType
# )
Type = nativeValue(§Type§)
# IntersectionType
And = nativeFunction(
	(...ChoiceTypes: List(Type)): Type
	§(...args) => new IntersectionType(args)§
)
# UnionType
Or = nativeFunction(
	(...ChoiceTypes: List(Type)): Type
	§(...args) => new UnionType(args)§
)
# ComplementType
Not = nativeFunction(
	(T: Type): Type
	§(type) => new ComplementType(type)§
)
# SubtractionType
# Set difference: Minuend without Subtrahend
Without = (
	Minuend: Type
	Subtrahend: Type
) => Minuend.And(Not(Subtrahend))
# The Type that only contains the given value.
TypeOf = nativeFunction(
	(value: Any): Type
	§value => new TypeOfType(value)§
)
# The set of values that is of the given Type
# The inverse of TypeOf
ValueOf = nativeFunction(
	(T: TypeOf(Any)): T/value
	§T => new ValueOfType(T)§
)
#endregion Types
#region Functions
#region Any
# Liefert true, wenn die beiden Werte gleich sind (Referenzgleichheit)
# TODO deepEqual?
equal = nativeFunction(
	(first second): Boolean
	§(first, second) => first === second§
)
#endregion Any
#region Number
# Liefert den Rest bei ganzzahliger Division.
# TODO moduloFloat?
modulo = nativeFunction(
	(dividend: Integer divisor: NonZeroInteger): Integer
	§(dividend, divisor) => dividend % divisor§
)
# minuend - subtrahend
subtract = nativeFunction(
	(minuend: Rational subtrahend: Rational): Rational
	§(minuend, subtrahend) => minuend - subtrahend§
)
# minuend - subtrahend
subtractFloat = nativeFunction(
	(minuend: Float subtrahend: Float): Float
	§(minuend, subtrahend) => minuend - subtrahend§
)
# Liefert die Summe der args.
sum = nativeFunction(
	(...arg: List(Rational)): Rational
	§
		(...args) =>
			args.reduce(
				(accumulator, current) =>
					accumulator + current,
				0)
	§
)
# Liefert die Summe der args.
sumFloat = nativeFunction(
	(...arg: List(Float)): Float
	§
		(...args) =>
			args.reduce(
				(accumulator, current) =>
					accumulator + current,
				0)
	§
)
#endregion Number
#region String
# Liefert Error, wenn das gegebene json kein valides JSON ist.
parseJson = nativeFunction(
	(json: String): Or(JsonValue Error)
	§TODO§
)
JsonValue = Or(JsonPrimitive List(JsonPrimitive) Dictionary(JsonPrimitive))
JsonPrimitive = Or(() Boolean Rational String)
# Gibt die capture groups zurück
regex = nativeFunction(
	(
		text: String
		regex: String
	): Or(Dictionary(String) ())
	§TODO§
)
#endregion String
#region List
forEach = nativeFunction(
	(
		values: List(Any)
		callback: (
			value: Any
			# TODO
			# value: TypeOf(values)/ElementType
			# TODO Integer vs FloatInteger
			# index: Integer
		): ()
	): ()
	§TODO§
)
#endregion List
#region Stream
#region core
# Beendet den Stream.
complete = nativeFunction(
	(stream$: Stream(Any)): ()
	§
		(stream$) => {
			stream$.complete();
			return null;
		}
	§
)
subscribe = nativeFunction(
	(stream$: Stream(Any) listener: (value: stream$/ValueType): ()): ()
	§
		(stream$, listener) => {
			const listenerFunction = (value) => {
				_callFunction(listener, [value]);
			};
			return stream$.subscribe(listenerFunction);
		}
	§
)
#endregion core
#region create
# Startwert: ()
# Schickt eine HTTP Anfrage ab und liefert die Antwort als Text.
httpTextRequest$ = nativeFunction(
	(
		url: String
		method: String
		headers: Dictionary(String)
		body: Any
	): Stream(Or(() String Error))
	§[...]§
)
# gibt alle delayMs die nächste Zahl aus, beginnend mit 1
timer$ = nativeFunction(
	(delayMs: Float): Stream(Float)
	§
		(delayMs) => {
			const stream$ = createSource$(1);
			const cycle = () => {
				setTimeout(() => {
					if (stream$.completed) {
						return;
					}
					processId++;
					stream$.push(stream$.lastValue! + 1, processId);
					cycle();
				}, delayMs);
			};
			cycle();
			return stream$;
		}
	§
)
#endregion create
#endregion Stream
#region Utility
import = nativeFunction(
	(path: String): Any
	§require§
)
# Gibt die args in der Konsole aus.
log = nativeFunction(
	(...args: List(Any)): ()
	§console.log§
)
# Führt den iteratee count mal aus, beginnend mit index 1.
repeat = nativeFunction(
	(
		count: Integer
		iteratee: (index: Integer): ()
	): ()
	§repeat§
)
#region JavaScript
# Führt den gegebenen String als JavaScript aus und liefert dessen Rückgabe.
runJS = nativeFunction(
	(js: String): Any
	§eval§
)
# Interprets the given String as js Code and yields the return value,
# assuming the specified type without checking. Make sure the Type fits under all circumstances
nativeFunction = nativeFunction(
	# (FunctionType: (x: Any): x is (): Any js: String): FunctionType
	(FunctionType: Type js: String): ValueOf(FunctionType)
	§[...]§
)
# Interprets the given String as js Code and yields the return value,
# type???
nativeValue = nativeFunction(
	(js: String): Any
	§[...]§
)
#endregion JavaScript
#endregion Utility
#endregion Functions
# Type = Any: Boolean
# FunctionType = (x: Any): x is (): Any